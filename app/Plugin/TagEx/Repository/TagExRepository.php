<?php

namespace Plugin\TagEx\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TagExRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagExRepository extends EntityRepository
{
    public $app;

    public function setApplication($app) {
        $this->app = $app;
    }

    /**
     * Tagのランク順でTagExを返却
     *
     */
    public function findTagEx($id = null)
    {
        $qb = $this->createQueryBuilder('tagex');
        $qb->innerJoin('tagex.Tag', 'Tag');
        $qb->addOrderBy('Tag.rank', 'desc');

        $result = null;

        if(!empty($id)) {
            $qb->andWhere('Tag.id = :id');
            $qb->setParameter(':id', $id);

            $result = $qb->getQuery()->getSingleResult();

        } else {
            $result = $qb->getQuery()->getResult();
        }

        return $result;
    }


    private function getTagMaxInfo()
    {
        $qb = $this->createQueryBuilder('tagex');
        $qb->innerJoin('tagex.Tag', 'Tag');
        $qb->select('MAX(Tag.rank) as max_rank, MAX(Tag.id) as max_id');

        $result = $qb->getQuery()->getSingleResult();

        return $result;
    }

    /**
     * タグ情報保存
     *
     * @param \Plugin\TagEx\Entity\TagEx $TagEx
     */
    public function save(\Plugin\TagEx\Entity\TagEx $TagEx)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            if (!$TagEx->getTag()->getId()) {

                $arrMaxInfo = $this->getTagMaxInfo();

                if(count($arrMaxInfo) == 0) {
                    $rank = 0;
                    $id = 0;
                }

                if(!$arrMaxInfo['max_rank']) {
                    $rank = 0;
                } else {
                    $rank = $arrMaxInfo['max_rank'];
                }

                if(!$arrMaxInfo['max_id']) {
                    $id = 0;
                } else {
                    $id = $arrMaxInfo['max_id'];
                }

                $TagEx->getTag()->setId($id + 1);
                $TagEx->getTag()->setRank($rank + 1);
            }

            $em->persist($TagEx->getTag());
            $em->flush();

            $em->persist($TagEx);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    public function delete(\Plugin\TagEx\Entity\TagEx $TagEx)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {

            $tagId = $TagEx->getTag()->getId();
            $rank = $TagEx->getTag()->getRank();
            $tagExId = $TagEx->getId();

            $em->createQueryBuilder()
            ->update('Eccube\Entity\Master\Tag', 't')
            ->set('t.rank', 't.rank - 1')
            ->where('t.rank > :rank')
            ->setParameter('rank', $rank)
            ->getQuery()
            ->execute();

            $em->createQueryBuilder()
            ->delete('Eccube\Entity\Master\Tag', "Tag")
            ->where('Tag.id = :id')
            ->setParameter(':id', $tagId)
            ->getQuery()
            ->execute();

            $em->createQueryBuilder()
            ->delete('Plugin\TagEx\Entity\TagEx', "TagEx")
            ->where('TagEx.id = :id')
            ->setParameter(':id', $tagExId)
            ->getQuery()
            ->execute();

            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }
        return true;
    }
}
